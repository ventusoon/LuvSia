import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as t,c,a,b as e,d as r,f as o,e as n}from"./app-c1efbd90.js";const l={},u={id:"sub-web-modify前端搭建",tabindex:"-1"},v=a("a",{class:"header-anchor",href:"#sub-web-modify前端搭建","aria-hidden":"true"},"#",-1),p={href:"https://github.com/youshandefeiyang/sub-web-modify",target:"_blank",rel:"noopener noreferrer"},h={href:"https://sub.luvsia.com",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/CareyWang/sub-web",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/youshandefeiyang/sub-web-api",target:"_blank",rel:"noopener noreferrer"},g=n(`<h3 id="更新系統並安裝-node-與-yarn" tabindex="-1"><a class="header-anchor" href="#更新系統並安裝-node-與-yarn" aria-hidden="true">#</a> 更新系統並安裝 Node 與 Yarn</h3><p>依次運行下面四行代碼，若是 CentOS 系統，請自行替換下面前兩行命令中的 <strong><code>apt</code></strong> 為 <strong><code>yum</code></strong></p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>apt update -y
apt install -y curl wget sudo nodejs git
apt install npm
npm install -g yarn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令執行完畢以後，請運行下面的代碼查詢 Node 與 Yarn 是否安裝成功，若是成功會返回版本號。</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>node -v
yarn --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下載並安裝-sub-web-modify" tabindex="-1"><a class="header-anchor" href="#下載並安裝-sub-web-modify" aria-hidden="true">#</a> 下載並安裝 sub-web-modify</h3><p>拉取 <strong><code>sub-web-modify</code></strong> 程序，並進入 <strong><code>sub-web-modify</code></strong> 文件夾</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>git clone https://github.com/youshandefeiyang/sub-web-modify.git
cd sub-web-modify
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在項目目錄中安裝構建依賴項，構建的過程稍微有點長</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>yarn install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 webpack 運行 Web 客戶端以進行本地開發。</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>yarn serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>出現下圖則表示前端調試模式啟動成功</p><figure><img src="https://raw.githubusercontent.com/ventusoon/LuvSia/gh-pages/images/buildSUB/yarn-success.png" alt="yarn-success" tabindex="0" loading="lazy"><figcaption>yarn-success</figcaption></figure>`,14),f={id:"這時-我們瀏覽器訪問-http-伺服器ip-8080-應該可以進行前端-sub-web-modify-的預覽了",tabindex:"-1"},S=a("a",{class:"header-anchor",href:"#這時-我們瀏覽器訪問-http-伺服器ip-8080-應該可以進行前端-sub-web-modify-的預覽了","aria-hidden":"true"},"#",-1),y={href:"http://xn--ip-rm3c95yyow:8080/",target:"_blank",rel:"noopener noreferrer"},_=n(`<h4 id="記住8082端口的防火牆和安全組要開放" tabindex="-1"><a class="header-anchor" href="#記住8082端口的防火牆和安全組要開放" aria-hidden="true">#</a> <em>記住8082端口的防火牆和安全組要開放</em></h4><h3 id="修改默認後端地址並增加遠程規則" tabindex="-1"><a class="header-anchor" href="#修改默認後端地址並增加遠程規則" aria-hidden="true">#</a> 修改默認後端地址並增加遠程規則</h3><p>找到 VPS /root/sub-web-modify/src/views/Subconverter.vue 文件用編輯器打開</p><p>找到 backendOptions:將你解析好的後端地址輸入進去。域名為你剛才準備的後端域名，要將http改成https，並且增加/sub?的後綴。（這樣選項下面就會出現自己的後端地址）</p><p>如果不想用後端作者默認提供的轉換那可以把 const defaultBackend = 也改成你自己的域名記得加上 &quot;&quot;。</p><p>找到 remoteConfig: [ 後回車將喜歡的規則復制進去即可。</p><h3 id="配置完畢後打包網站" tabindex="-1"><a class="header-anchor" href="#配置完畢後打包網站" aria-hidden="true">#</a> 配置完畢後打包網站</h3><p>配置完畢以後，程序會自動更新，再次刷新前端網頁，會出現剛才添加的相關規則。</p><p>經過上面的修改默認後端地址和原程配置的規則就修改好了。</p><p>至此，我們的前端調試完畢，我們現在需要打包，生成一個發布目錄並將他發布了。</p><p>首先停止調試程序，CTRL+C ，退出當前調試，然後執行下面的命令進行打包：</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>yarn build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>執行以下打包命令，在 /root/sub-web-modify 下面會生成一個 dist 目錄，這個目錄即為網頁的發布目錄。</p><p>將這個目錄的裡面的文件復制到你站點的根目錄即可。</p><h3 id="一鍵搭建前端" tabindex="-1"><a class="header-anchor" href="#一鍵搭建前端" aria-hidden="true">#</a> 一鍵搭建前端</h3><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>cd /root &amp;&amp; git clone https://github.com/youshandefeiyang/sub-web-modify.git &amp;&amp; chmod -R 755 sub-web-modify &amp;&amp; cd sub-web-modify &amp;&amp; yarn install &amp;&amp; yarn build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="發布前端" tabindex="-1"><a class="header-anchor" href="#發布前端" aria-hidden="true">#</a> 發布前端</h3><p>沒有安裝寶塔的去寶塔官網看教程安裝.</p><p>在寶塔面板中點擊增加站點分別將前端站點增加上去，並配置好ssl證書。</p><p>將 /root/sub-web/dist文件夾內的所有文件復制到前端站點的根目錄下即可。</p><p>訪問該網站，前端就部署好了。</p>`,21),x={id:"subconverter後端搭建",tabindex:"-1"},J=a("a",{class:"header-anchor",href:"#subconverter後端搭建","aria-hidden":"true"},"#",-1),w={href:"https://github.com/tindy2013/subconverter",target:"_blank",rel:"noopener noreferrer"},k=n(`<h3 id="新建後端站點並進行反向代理" tabindex="-1"><a class="header-anchor" href="#新建後端站點並進行反向代理" aria-hidden="true">#</a> 新建後端站點並進行反向代理</h3><p>在寶塔面板中新建後端的站點，同樣配置好SSL並將設置站點的反向代理到25500。</p><p>點擊新建好的後端網站的網站名在彈出來的消息盒子中點擊反向代理添加發現代理。</p><p>反向代理配置方法方法如圖：</p><figure><img src="https://raw.githubusercontent.com/ventusoon/LuvSia/gh-pages/images/buildSUB/buildSUB.png" alt="反代" tabindex="0" loading="lazy"><figcaption>反代</figcaption></figure><p>設置完畢後我們開始安裝後端</p><h3 id="搭建後端程序" tabindex="-1"><a class="header-anchor" href="#搭建後端程序" aria-hidden="true">#</a> 搭建後端程序</h3><h4 id="這裡我們可以用兩種方法搭建後端程序-第一種是用二進制文件搭建-第二種為使用docker搭建。我個人比較推薦docker配置簡單一行命令即可搞定" tabindex="-1"><a class="header-anchor" href="#這裡我們可以用兩種方法搭建後端程序-第一種是用二進制文件搭建-第二種為使用docker搭建。我個人比較推薦docker配置簡單一行命令即可搞定" aria-hidden="true">#</a> 這裡我們可以用兩種方法搭建後端程序，第一種是用二進制文件搭建，第二種為使用Docker搭建。我個人比較推薦Docker配置簡單一行命令即可搞定</h4><h3 id="方法一-二進制文件搭建" tabindex="-1"><a class="header-anchor" href="#方法一-二進制文件搭建" aria-hidden="true">#</a> 方法一 二進制文件搭建</h3><h4 id="下載並解壓-subconverter-二進制文件" tabindex="-1"><a class="header-anchor" href="#下載並解壓-subconverter-二進制文件" aria-hidden="true">#</a> 下載並解壓 subconverter 二進制文件</h4><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>cd /root
wget https://github.com/tindy2013/subconverter/releases/download/v0.7.2/subconverter_linux64.tar.gz
tar -zxvf subconverter_linux64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="完成以後-在-root-文件夾下會多出一個-subconverter-的文件夾-這個就是我們的後端程序" tabindex="-1"><a class="header-anchor" href="#完成以後-在-root-文件夾下會多出一個-subconverter-的文件夾-這個就是我們的後端程序" aria-hidden="true">#</a> <em>完成以後，在 /root 文件夾下會多出一個 subconverter 的文件夾，這個就是我們的後端程序</em></h4><h4 id="修改配置文件參數" tabindex="-1"><a class="header-anchor" href="#修改配置文件參數" aria-hidden="true">#</a> 修改配置文件參數</h4><p>現在我們需要修改後端配置文件中的一些參數</p><p>找到VPS文件 /root/subconverter/pref.ini ，找到如下參數進行修改</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>api_access_token=123123dfsdsdfsdfsdf            #隨意設置自己知道就行
managed_config_prefix=https://sub.yourdomin.com  #設置成我們剛剛解析的後端域名
listen=127.0.0.1                                #這裡改成 127.0.0.1 進行反代
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="創建服務進程並啟動" tabindex="-1"><a class="header-anchor" href="#創建服務進程並啟動" aria-hidden="true">#</a> 創建服務進程並啟動</h4><p>接下來我們需要創建一個服務，讓VPS每次重啟或是開機自動運行後端程序</p><p>找到VPS目錄 /etc/systemd/system，創建一個名為 sub.service 的文件</p><p>打開文件，貼入以下內容，保存。</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>[Unit]
Description=A API For Subscription Convert
After=network.target
 
[Service]
Type=simple
ExecStart=/root/subconverter/subconverter
WorkingDirectory=/root/subconverter
Restart=always
RestartSec=10
 
[Install]
WantedBy=multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="檢查運行狀態以及設置開機自啟" tabindex="-1"><a class="header-anchor" href="#檢查運行狀態以及設置開機自啟" aria-hidden="true">#</a> 檢查運行狀態以及設置開機自啟</h4><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>systemctl daemon-reload
systemctl start sub
systemctl enable sub
systemctl status sub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="到這裡-後端也就搭建完畢了-我們現在可以在瀏覽器裡面訪問我們的後端了-訪問後端域名後端搭建成功" tabindex="-1"><a class="header-anchor" href="#到這裡-後端也就搭建完畢了-我們現在可以在瀏覽器裡面訪問我們的後端了-訪問後端域名後端搭建成功" aria-hidden="true">#</a> <em>到這裡，後端也就搭建完畢了，我們現在可以在瀏覽器裡面訪問我們的後端了，訪問後端域名後端搭建成功！</em></h4><h3 id="方法二-docker容器搭建" tabindex="-1"><a class="header-anchor" href="#方法二-docker容器搭建" aria-hidden="true">#</a> 方法二 Docker容器搭建</h3><p>如果服務器安裝了Docker可以使用命令：</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>docker run -d --restart=always -p 25500:25500 tindy2013/subconverter:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然後再用下面的命令確認一下狀態</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>curl http://localhost:25500/version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果輸出當前 subconverter 容器版本幾位搭建成功。</p>`,30);function C(V,B){const i=s("ExternalLinkIcon");return t(),c("div",null,[a("h2",u,[v,e(),a("a",p,[e("Sub-Web-Modify前端搭建"),r(i)])]),a("p",null,[a("a",h,[e("本項目"),r(i)]),e("基於"),a("a",b,[e("CareyWang/sub-web"),r(i)]),e("，重製CSS樣式，解決大部分布局細節問題，增加“暗黑模式”，默認自動切換亮/暗模式（點擊“太陽/月亮”圖標可手動切換），增加“高級功能”點擊顯示/隱藏，添加短鏈接選擇/自定義功能，增加近百條遠程配置，新增"),a("a",m,[e("sub-web聚合API"),r(i)]),e("，增加上傳自定義遠程配置/JS進階排序節點/JS進階篩選節點等功能！")]),o(" more "),g,a("h4",f,[S,e(" 這時，我們瀏覽器訪問 "),a("a",y,[e("http://伺服器ip:8080/"),r(i)]),e(" 應該可以進行前端 sub-web-modify 的預覽了")]),_,a("h2",x,[J,e(),a("a",w,[e("SubConverter後端搭建"),r(i)])]),k])}const L=d(l,[["render",C],["__file","build-sub.html.vue"]]);export{L as default};
