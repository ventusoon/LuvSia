import{_ as r,a as d,b as c,c as u}from"./gitlab-240b439b.js";import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as h,c as g,e as m,a as e,b as s,d as n,w as l,f as a}from"./app-ed9a3ccc.js";const v={},b=e("blockquote",null,[e("p",null,[e("em",null,[e("strong",null,"Build this site Hugo Blog 实战")])])],-1),k=a(`<ul><li><a href="#%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD">闲言碎语</a><ul><li><a href="#%E4%BB%8E%E4%BF%A1%E7%94%A8%E5%8D%A1%E8%81%8A%E5%88%B0%E9%99%88%E5%B9%B4%E5%BE%80%E4%BA%8B">从信用卡聊到陈年往事</a></li><li><a href="#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9hexo%E4%B8%8Ehugo">如何选择Hexo与Hugo？</a></li><li><a href="#%E6%9C%80%E7%BB%88%E9%80%89%E6%8B%A9">最终选择</a></li></ul></li><li><a href="#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">准备工作</a><ul><li><a href="#%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E5%92%8C%E5%B7%A5%E5%85%B7">安装环境和工具</a></li></ul></li><li><a href="#%E5%BC%80%E5%A7%8B%E5%AE%9E%E6%88%98">开始实战</a><ul><li><a href="#%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA">本地搭建</a><ul><li><a href="#%E5%B0%86-hugo-%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">将 hugo 添加到环境变量</a></li><li><a href="#git-bash">Git Bash</a></li><li><a href="#%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%85%E5%AE%B9%E7%9B%AE%E5%BD%95">文件夹内容目录</a></li><li><a href="#%E5%AE%89%E8%A3%85-vs-code-%E6%8F%92%E4%BB%B6">安装 VS code 插件</a></li><li><a href="#%E7%94%9F%E6%88%90-git-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93">生成 git 本地仓库</a></li><li><a href="#%E7%94%9F%E6%88%90-ssh-%E5%AF%86%E9%92%A5">生成 SSH 密钥</a></li><li><a href="#%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98">安装主题</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E9%A2%84%E8%A7%88">本地搭建预览</a></li></ul></li><li><a href="#%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%90%8C%E6%AD%A5%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93">根目录同步私有仓库</a><ul><li><a href="#%E6%BA%90%E7%A0%81-public-%E5%88%86%E5%BC%80%E5%AD%98%E6%94%BE">源码&amp; Public 分开存放</a></li><li><a href="#%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5">上传公钥</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95">远程连接测试</a></li><li><a href="#%E7%94%9F%E6%88%90-token%E7%94%A8%E4%BA%8E%E8%BF%9E%E6%8E%A5%E4%B8%A4%E4%B8%AA%E4%BB%93%E5%BA%93">生成 Token，用于连接两个仓库</a></li><li><a href="#push-%E6%9C%AC%E5%9C%B0%E5%88%B0%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93">Push 本地到私有仓库</a></li><li><a href="#%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E7%94%9F%E6%88%90-secrets">私有仓库生成 Secrets</a></li></ul></li><li><a href="#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E5%85%AC%E5%BC%80%E4%BB%93%E5%BA%93">自动部署到公开仓库</a></li><li><a href="#cdn%E5%8A%A0%E9%80%9F">CDN加速</a></li><li><a href="#%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90">大功告成</a></li></ul></li><li><a href="#%E5%A1%AB%E5%9D%91%E5%90%8E%E8%AE%B0">填坑后记</a></li><li><a href="#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">写在最后</a></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span> <span class="token number">2022.02</span><span class="token number">.11</span> add 侧边栏 鼠标指针 样式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span> <span class="token number">2022.01</span><span class="token number">.26</span> Update autodeploy<span class="token punctuation">.</span>yml 实现 Hugo Blog 源码github  gitee  <span class="token function">gitlab三端同步</span> <span class="token punctuation">(</span>可以没有 <span class="token operator">|</span> 就很帅<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span> <span class="token number">2022.01</span><span class="token number">.26</span> Done 😎
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span> <span class="token number">2022.01</span><span class="token number">.26</span> <span class="token operator">&lt;</span>争取一口气把剩下的内容填完<span class="token operator">&gt;</span> 并没有 <span class="token operator">|</span> Markdown的排版比码字更费事 💦
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span> <span class="token number">2022.01</span><span class="token number">.24</span> 简简单单的两个美化项目又变成了好几个      😥 😥 😥
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span> <span class="token number">2022.01</span><span class="token number">.23</span> 前言 <span class="token operator">&lt;</span>写了一些废话<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span> <span class="token number">2022.01</span><span class="token number">.20</span> 萌生写下这篇文章的想法 并把大纲po在这里
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="闲言碎语" tabindex="-1"><a class="header-anchor" href="#闲言碎语" aria-hidden="true">#</a> 闲言碎语</h2><h3 id="从信用卡聊到陈年往事" tabindex="-1"><a class="header-anchor" href="#从信用卡聊到陈年往事" aria-hidden="true">#</a> 从信用卡聊到陈年往事</h3>`,10),E=e("code",null,"千挑万选",-1),_=e("code",null,"内涵",-1),f=e("code",null,"折腾癖好",-1),B={href:"https://luvsia.com/",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"Ctrl+C",-1),x=e("code",null,"Ctrl+V",-1),C=e("code",null,"工具",-1),y=a('<li><p>这篇博客，主要是记录下整个Blog的搭建基本思路与部署过程，Blog完成<code>Hello World</code>之后，后续一直在跟进基础美化、插件适配的工作，所以这篇文章也就搁置如今。“简简单单”的~<s>两个美化项目</s>~，碍于能力有限，三天时间才完成80%，真<code>tm</code>惨...</p></li><li><p>在刚接触到Blog搭建还是在近6年以前，也是搞了个域名，搭了服务器，并把博客部署在服务器上，用的是<code>WordPress</code>。在当时，<code>WordPress</code>就已经是一个成熟的网站建设工具。<code>WordPress</code>功能是挺强大，主题、插件多，用户量基数也大，很容易就可以找到一些自己喜欢的“小物件”放到自己的博客上。奈何当时对代码之类的东西一窍不通，完全是通过可视化操作去完成的，也就不知道Go语言与PHP语言的区别，当然PHP语言在当时依然是主流。那会儿不仅要把精力放在服务器的维护上，还要把网站的Blog给弄好，还要用到Nginx、Mysql、phpmyadmin一大堆工具，还要在数据库中修改才能满足一些自己的需求，可以说是十分的繁琐。后来因为原服务器废弃，数据也没有转移，也没有本地保存，折腾的东西也就随之而去了...</p></li><li><p>很久没有接触这方面的知识，现在就相当于回炉重造。了解了一下目前主流的Blog建站工具之后，Hexo和Hugo进入我的眼帘。从搜索引擎的数据上来看，Hexo的内容量与Hugo相比，完全不在一个数量级...<br><img src="'+r+'" alt="Hexo" loading="lazy"><br><img src="'+d+'" alt="Hugo" loading="lazy"></p></li><li><p>传统在服务器部署，虽然本地也可以操作，修改内容，但大部分人都是仅仅只在服务器上完成，省去了本地修改、远程部署的步骤。导致服务器一崩，所有数据都随风而去...比如我自己在几年前也是如此。现如今，静态网站成为主流，Go语言也让国际大厂争先使用，像<strong>Google，Dropbox，SoundCloud，Twitter，PayPal</strong>等公司都用 Go 语言构建了他们的后端系统。</p></li>',4),S=a('<h3 id="如何选择hexo与hugo" tabindex="-1"><a class="header-anchor" href="#如何选择hexo与hugo" aria-hidden="true">#</a> 如何选择Hexo与Hugo？</h3><p><strong>Hugo中文文档：</strong></p><ul><li>Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。当前的静态网站生成工具对环境依赖过多，性能较差，于是使用 Go 语言写了一个静态网站生成器 Hugo。不仅解决了环境依赖、性能较差的问题，还有使用简单、部署方便等诸多优点，通过 LiveReload 实时刷新，极大的优化文章的写作体验。Hugo 能做什么？通过 Hugo 你可以快速搭建你的静态网站，比如博客系统、文档介绍、公司主页、产品介绍等等。</li></ul><p><strong>Hexo中文文档：</strong></p><ul><li>什么是Hexo ? Hexo是一款基于Node.js的静态博客框架,依赖少易于安装使用,可以方便的生成静态网页托管在GitHub和Heroku上,是搭建博客的首选框架。</li></ul><h3 id="最终选择" tabindex="-1"><a class="header-anchor" href="#最终选择" aria-hidden="true">#</a> 最终选择</h3>',6),j={href:"https://pages.github.com/",target:"_blank",rel:"noopener noreferrer"},H=e("code",null,"Github-Pages",-1),w=e("code",null,"Hugo",-1),G=e("code",null,"Github-Pages",-1),q=e("code",null,"CDN",-1),D=a('<h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><h3 id="安装环境和工具" tabindex="-1"><a class="header-anchor" href="#安装环境和工具" aria-hidden="true">#</a> 安装环境和工具</h3><table><thead><tr><th>环境</th><th></th><th></th><th>工具</th><th></th></tr></thead><tbody><tr><td>Windows</td><td>Hugo</td><td>Git</td><td>VS code</td><td>github-pages</td></tr></tbody></table>',3),P={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://pages.github.com/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/gohugoio/hugo/releases",target:"_blank",rel:"noopener noreferrer"},L=a(`<h2 id="开始实战" tabindex="-1"><a class="header-anchor" href="#开始实战" aria-hidden="true">#</a> 开始实战</h2><h3 id="本地搭建" tabindex="-1"><a class="header-anchor" href="#本地搭建" aria-hidden="true">#</a> 本地搭建</h3><h4 id="将-hugo-添加到环境变量" tabindex="-1"><a class="header-anchor" href="#将-hugo-添加到环境变量" aria-hidden="true">#</a> 将 hugo 添加到环境变量</h4><ul><li><code>WIN+R</code> 输入 <code>sysdm.cpl</code> ，<code>高级</code>===&gt;&gt; <code>环境变量</code> ===&gt;&gt; <code>Path</code> ===&gt;&gt; 添加刚才新建的 <code>Hugo</code> 中的 <code>bin</code> 目录， <code>bin</code> 中放进刚刚下载的 <code>hugo.exe</code></li></ul><blockquote><p>Hugo</p><blockquote><p>bin</p><blockquote><p>hugo.exe</p></blockquote><p>Site</p><blockquote><p>example</p></blockquote></blockquote></blockquote><h4 id="git-bash" tabindex="-1"><a class="header-anchor" href="#git-bash" aria-hidden="true">#</a> Git Bash</h4><ul><li>进入 Site 文件夹，鼠标右键 <code>Git Bash</code> 或打开 <code>Git Bash</code> 后 <code>cd</code> 到这个目录，创建 hugo 博客所在目录</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>hugo <span class="token keyword">new</span> site <span class="token generics"><span class="token punctuation">&lt;</span>example<span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="文件夹内容目录" tabindex="-1"><a class="header-anchor" href="#文件夹内容目录" aria-hidden="true">#</a> 文件夹内容目录</h4>`,9),V=e("p",null,[e("strong",null,"example")],-1),M=e("p",null,[e("strong",null,"archetypes"),s(" # 存放模板")],-1),O={href:"http://default.md",target:"_blank",rel:"noopener noreferrer"},I=a("<p><strong>config.toml</strong> # 基础配置文件</p><p><strong>content</strong> # 存放 page 与 post，所有新博文都要存放在 content 中</p><p><strong>data</strong> # 存放数据模板</p><p><strong>layouts</strong> # 存放布局模板文件，如果想要调整主题中的页面布局，可以在 layouts 中放入同名文件，hugo 将优先读取根目录中的 layouts 文件，避免直接修改主题文件，导致不必要的错误</p><p><strong>static</strong> # 存放静态资源，比如自定义 css、图片图标等</p><p><strong>themes</strong> # 主题文件夹</p>",6),K=a(`<h4 id="安装-vs-code-插件" tabindex="-1"><a class="header-anchor" href="#安装-vs-code-插件" aria-hidden="true">#</a> 安装 VS code 插件</h4><ul><li><p>打开 VS Code 软件。点击Extensions，安装所需插件。推荐几个必备和好用的插件。</p><ul><li><p><strong>gpm</strong> 用来管理 Github 上的文件。 <strong>必备</strong></p></li><li><p><strong>Setting Sync</strong> 同步 Github 与本地文件。 <strong>必备</strong></p></li><li><p><strong>Markdown All in One</strong> 使用 Markdown 写作的利器。<strong>必备</strong></p></li><li><p><strong>Chinese Language Pack for Visual Studio Code</strong> VS Code 的汉化插件。 <em>推荐</em></p></li><li><p><strong>Auto Rename Tag</strong> 如果涉及修改代码的时候，非常好用。<em>推荐</em></p></li><li><p><strong>Material Icon Theme</strong> 一套个性的图标主题。 <em>推荐</em></p></li></ul></li></ul><h4 id="生成-git-本地仓库" tabindex="-1"><a class="header-anchor" href="#生成-git-本地仓库" aria-hidden="true">#</a> 生成 git 本地仓库</h4><ul><li>进入新生成的博客文件夹并初始化一个空的 git 本地仓库，之后博客文件夹里会出现一个隐藏的.git 文件夹</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cd <span class="token operator">&lt;</span>example<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>git init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="生成-ssh-密钥" tabindex="-1"><a class="header-anchor" href="#生成-ssh-密钥" aria-hidden="true">#</a> 生成 SSH 密钥</h4><p><em><strong>仅首次，后面可以记录下，以备使用</strong></em></p><ul><li>SSH key 一般存储在系统盘 C: \\Users&lt;用户名&gt;.ssh 目录中，git 全局设置存在 C: \\Users&lt;用户名&gt;.gitconfig 文件中。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;example@email.com&quot;</span> <span class="token comment">#最好是github账号邮箱。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>之后会跳出一堆提示，在系统提示输入 passphrase 时直接回车不添加。生成的密钥对会储存在 C: \\Users&lt;用户名&gt;.ssh 中，公钥存放在 id_rsa.pub 里，私钥存放在 id_rsa 里，妥善保管密钥对，公钥稍后需要使用，私钥非极特殊情况勿上传！</p></li><li><p>在博客根目录进行 git 的配置。最好是github账号、邮箱。本地提交 commit 时 github 上可以查看提交者信息。</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config user.name <span class="token string">&quot;examplename&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config user.email <span class="token string">&quot;example@email.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安装主题" tabindex="-1"><a class="header-anchor" href="#安装主题" aria-hidden="true">#</a> 安装主题</h4>`,14),W={href:"https://themes.gohugo.io/themes/github-style",target:"_blank",rel:"noopener noreferrer"},R=e("li",null,[e("p",null,[e("strong",null,"以本博客主题为例，用模块方式安装， themes/github-style 为安装到目标文件夹")])],-1),z=a(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>git submodule add git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>MeiK2333<span class="token operator">/</span>github<span class="token operator">-</span>style<span class="token punctuation">.</span>git themes<span class="token operator">/</span>github<span class="token operator">-</span>style
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>打开新的 config.toml 文件，修改 theme = “example-theme” 为你安装的主题名，主题名要与 themes 中的主题文件夹名称一致。</li></ul><h4 id="本地搭建预览" tabindex="-1"><a class="header-anchor" href="#本地搭建预览" aria-hidden="true">#</a> 本地搭建预览</h4>`,3),Y={href:"http://localhost:1313",target:"_blank",rel:"noopener noreferrer"},J=a(`<h3 id="根目录同步私有仓库" tabindex="-1"><a class="header-anchor" href="#根目录同步私有仓库" aria-hidden="true">#</a> 根目录同步私有仓库</h3><h4 id="源码-public-分开存放" tabindex="-1"><a class="header-anchor" href="#源码-public-分开存放" aria-hidden="true">#</a> 源码&amp; Public 分开存放</h4><ul><li>建两个 <strong>repositories</strong> ，一个存放<strong>根目录文件</strong>，设置为私密，另一个用来存放 <strong>public</strong> 中的内容，设置为公开</li></ul><h4 id="上传公钥" tabindex="-1"><a class="header-anchor" href="#上传公钥" aria-hidden="true">#</a> 上传公钥</h4><p><em><strong>这里选择直接上传到该 github 用户的 setting 里</strong></em></p><ul><li>点击 github 页面右上角头像右侧下拉按钮，进入 <strong>Settings</strong>，找到左侧页面 <strong>SSH and GPG keys</strong> ，点击 <strong>New SSH key</strong> ，取一个便于识别的名称，下方填入之前生成的id_rsa.pub中的内容（以&quot;ssh-rsa&quot;开头，以邮箱结尾）。</li></ul><h4 id="远程连接测试" tabindex="-1"><a class="header-anchor" href="#远程连接测试" aria-hidden="true">#</a> 远程连接测试</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>ssh <span class="token operator">-</span><span class="token class-name">T</span> git<span class="token annotation punctuation">@github.com</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>显示 successfully 字样即可</strong></em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Hi</span> <span class="token operator">&lt;</span>github<span class="token operator">-</span>username<span class="token operator">&gt;</span><span class="token operator">!</span> <span class="token class-name">You</span>&#39;ve successfully authenticated<span class="token punctuation">,</span> but <span class="token class-name">GitHub</span> does not provide shell access<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="生成-token-用于连接两个仓库" tabindex="-1"><a class="header-anchor" href="#生成-token-用于连接两个仓库" aria-hidden="true">#</a> 生成 Token，用于连接两个仓库</h4><ul><li><p>右上角 <strong>Settings</strong> 里找到 <strong>Developer settings</strong> ，再点 <strong>Personal access tokens</strong> ，<strong>Generate new token</strong> 生成新的 <strong>token</strong> ，有效期可选永久生效。</p></li><li><p><strong>Select scopes</strong> 里勾选 <strong>repo</strong> 全部内容与 <strong>workflow</strong>。最后点击绿色按钮生成。</p></li><li><p>页面刷新后这个 <strong>Token</strong> 将不再显示，所以在导入前不要弄丢！</p></li></ul><h4 id="push-本地到私有仓库" tabindex="-1"><a class="header-anchor" href="#push-本地到私有仓库" aria-hidden="true">#</a> Push 本地到私有仓库</h4><ul><li><p>打开刚刚建立的私有仓库，复制SSH克隆代码，在 VS code 中的项目管理中点 + 克隆，粘贴，回车即可克隆。前提：本地的公钥与 github 设置里的公钥信息要一致。至此远程与本地即可连接成功。</p></li><li><p>将本地的博客根目录内容全部粘贴到连接好的私有仓库，开始 push。git 默认的分支应该是(master)，因为现在 github 的默认分支从 master 换成了 main（详见 GitHub 将替换掉 master 等术语 ），我们先切换分支到main：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>git checkout <span class="token operator">-</span>b main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>push 命令三件套</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token comment"># 添加目录下全部内容</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;new job&quot;</span> <span class="token comment"># 提交说明，出问题了可以回退到之前的commit</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main <span class="token comment"># 将本地内容推送到远程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>有时候新提交的本地有删除的内容，但是远端并没有删除，将 <code>-m</code> 改为 <code>-am</code> 即可</p></li><li><p>空文件夹不会被 push 上去，不管；如果有其他文件、文件夹不想 push 上去，在根目录下新建 .gitignore 文件，里面存放不想 push 的内容。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  idea<span class="token operator">/</span>            <span class="token comment">//忽略idea目录下的所有文件</span>
  <span class="token operator">/</span>idea<span class="token operator">/</span><span class="token keyword">do</span><span class="token punctuation">.</span>txt     <span class="token comment">//忽略某个具体文件</span>
  <span class="token operator">!</span>test<span class="token punctuation">.</span>txt        <span class="token comment">//不忽略 test.txt 文件</span>
  <span class="token operator">/</span><span class="token constant">TODO</span>            <span class="token comment">//仅仅忽略项目根目录下的 TODO 文件，不包括 test/TODO</span>
  <span class="token operator">*</span><span class="token punctuation">.</span>zip            <span class="token comment">//忽略所有.zip结尾的文件</span>
  doc<span class="token comment">/*.txt        //忽略 doc/notes.txt,但不包括 doc/server/arch.txt
  git rm -r --cached idea/do.txt    //-r为递归
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="私有仓库生成-secrets" tabindex="-1"><a class="header-anchor" href="#私有仓库生成-secrets" aria-hidden="true">#</a> 私有仓库生成 Secrets</h4>`,20),$=e("strong",null,"Settings",-1),U=e("strong",null,"Secrets",-1),Q=e("strong",null,"New repository secret",-1),X=e("strong",null,"PERSONAL_TOKEN",-1),Z=e("strong",null,"Token",-1),ee=a(`<h3 id="自动部署到公开仓库" tabindex="-1"><a class="header-anchor" href="#自动部署到公开仓库" aria-hidden="true">#</a> 自动部署到公开仓库</h3><p><strong><code>Github Action</code></strong></p><ul><li>进入博客根目录仓库，点上方的 Actions，set up a workflow yourself，之后你会发现 github 会在根目录下新建/.github/workflows/xxx.yml 文件。我的文件名 <strong>autodeploy.yml</strong> 。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>name: luvsia-hugo-blog-autodeploy <span class="token comment"># 自行命名</span>

on:
  push:
    branches:
      - main  <span class="token comment"># 博客根目录的默认分支，这里是main，也可是master</span>
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: <span class="token variable">\${{ github.workflow }</span><span class="token punctuation">}</span>-<span class="token variable">\${{ github.ref }</span><span class="token punctuation">}</span>
    steps:
      - uses: actions/checkout@v2
        with:               <span class="token comment"># 如果你安装主题时用的是git submodule add</span>
          submodules: <span class="token boolean">true</span>  <span class="token comment"># 那么这三行不必注释掉，这一行填写 true</span>
          fetch-depth: <span class="token number">0</span>    <span class="token comment"># Fetch all history for .GitInfo and .Lastmod</span>

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: <span class="token string">&#39;latest&#39;</span>  <span class="token comment"># 获取最新版本的hugo</span>
          extended: <span class="token boolean">true</span>          <span class="token comment"># 如果你使用的不是extended版本的hugo，将true改为false</span>

      - name: Build
        run: hugo   <span class="token comment"># 使用hugo构建静态网页</span>

      - name: Deploy to github
        uses: peaceiris/actions-gh-pages@v3
        if: <span class="token variable">\${{ github.ref == &#39;refs<span class="token operator">/</span>heads<span class="token operator">/</span>main&#39; }</span><span class="token punctuation">}</span>  <span class="token comment"># 注意填写main或者master</span>
        with:
          personal_token: <span class="token variable">\${{ secrets.PERSONAL_TOKEN }</span><span class="token punctuation">}</span> <span class="token comment"># 如果secret取了其他名称，将PERSONAL_TOKEN替换掉</span>
          external_repository: ventusoon/LuvSia <span class="token comment"># 填写远程 public 仓库 </span>
          publish_dir: ./public
          cname: luvsia.com        <span class="token comment"># 填写自定义域名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),se={href:"https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-set-personal-access-token-personal_token",target:"_blank",rel:"noopener noreferrer"},ne=a("<li><p>提交 <strong>commit</strong> ，保存， <strong>Action</strong> 变成绿色即成功！</p></li><li><p>这时公开仓库已经自动建了一个名为 <strong>gh-pages</strong> 的分支，里面出现的东西就是源码通过 <code>Hugo</code> 命令生成的静态网页文件，此时打开博客域名就可以看到博客内容。</p></li><li><p>根目录下的 config 文件中 base url 更换为自定义域名。</p></li>",3),ae=e("h3",{id:"cdn加速",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cdn加速","aria-hidden":"true"},"#"),s(" CDN加速")],-1),te={href:"https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#about-custom-domain-configuration",target:"_blank",rel:"noopener noreferrer"},ie=a(`<div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>A @ 185.199.108.153
A @ 185.199.109.153
A @ 185.199.110.153
A @ 185.199.111.153
CNAME @ 指向公开仓库的github域名
CNAME WWW 指向公开仓库的github域名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>进入公开仓库 <strong>Settings</strong> ，<strong>Pages</strong> 页面添加自定义域名，等待 DNS 检验成功，在此页面即可看到 <em><strong>仓库的github域名</strong></em>\` 。</p></li><li><p>使用了 CDN，github 上的 <strong>强制https</strong> 按钮可能不能点；如果无法正常显示 https，也可以在Cloudflare建立 <strong>强制https</strong> 规则。</p></li></ul><h3 id="大功告成" tabindex="-1"><a class="header-anchor" href="#大功告成" aria-hidden="true">#</a> 大功告成</h3><h2 id="填坑后记" tabindex="-1"><a class="header-anchor" href="#填坑后记" aria-hidden="true">#</a> 填坑后记</h2><ol><li>写新文章最好用命令行新建 md 文件，文件名为英文名最佳，增加解析效率。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>hugo <span class="token keyword">new</span> post<span class="token operator">/</span>first<span class="token operator">-</span>post<span class="token punctuation">.</span>md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>如在远程端操作过，则在本地执行操作前，都要 git pull 拉取远端数据，同步到本地。上面我们在远程博客根目录新建了 workflow，在本地开始写新的博文前，先在本地的博客根目录进行同步，不然会报错：</li></ol><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>git pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>执行 hugo server 过程中错误退出 git，导致之后执行时 1313 端口被占用，windows+r 输入 cmd 或者在VS code中打开 powershell 窗口：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> -aon<span class="token operator">|</span>findstr <span class="token string">&quot;1313&quot;</span>  <span class="token comment">#筛选使用1313端口的进程</span>
taskkill /f /PID xxxxx  <span class="token comment">#杀死占用的进程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,10),le={start:"4"},oe=e("strong",null,"特别注意",-1),re=a(`<ul><li><p><em><strong>分别在gitee、gitlab上新建公钥文件，取名分别为GITEE_KEY、GITLAB_KEY</strong></em></p></li><li><p><em><strong>更新 autodeploy.yml 文件，在后面加上如下代码</strong></em></p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  mirror_to_gitee:
    runs-on: ubuntu-latest
    steps:
      - name: <span class="token string">&#39;Checkout&#39;</span>
        uses: actions/checkout@v1
      - name: <span class="token string">&#39;Mirror to gitee&#39;</span>
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            git@gitee.com:ventusoon/LuvSia.com.git  <span class="token comment"># gitee仓库链接</span>
          ssh_private_key:
            <span class="token variable">\${{ secrets.GITEE_KEY }</span><span class="token punctuation">}</span>  <span class="token comment"># 新建的GITEE_KEY</span>

  mirror_to_gitlab:
    runs-on: ubuntu-latest
    steps:
      - name: <span class="token string">&#39;Checkout&#39;</span>
        uses: actions/checkout@v1
      - name: <span class="token string">&#39;Mirror to gitlab&#39;</span>
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            git@gitlab.com:ventusoon/LuvSia.com.git  <span class="token comment"># gitlab仓库链接</span>
          ssh_private_key:
            <span class="token variable">\${{ secrets.GITLAB_KEY }</span><span class="token punctuation">}</span>  <span class="token comment"># 新建的GILAB_KEY</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Gitee</strong></li></ul><figure><img src="`+c+'" alt="gitee" tabindex="0" loading="lazy"><figcaption>gitee</figcaption></figure><ul><li><strong>Gitlab</strong></li></ul><figure><img src="'+u+'" alt="gitlab" tabindex="0" loading="lazy"><figcaption>gitlab</figcaption></figure>',6),de={start:"5"},ce={href:"https://www.antmoe.com/posts/a811d614/",target:"_blank",rel:"noopener noreferrer"},ue=a(`<ul><li><em><strong>在 <code>extended_head.html</code> 中添加以下</strong></em></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/static-butterfly/dist/css/index.min.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2>`,3);function pe(he,ge){const t=o("ExternalLinkIcon"),i=o("RouterLink");return h(),g("div",null,[b,m("more"),k,e("ul",null,[e("li",null,[e("p",null,[s("前段时间，在老婆的支持下(“盗”刷老婆信用卡，orz)，买了一个十年的域名，起初拿来也就无非是给服务器套个域名，加个SSL，反代一些需要用到的web工具。想着这个域名好歹也是"),E,s("出来的（Sia刚好与老婆名字谐音，所以自然而然地在前面加个Luv不过分吧，2333），现在的朋友圈基本上也没咋发过东西，全都是一些工作上的琐事。不如开个博客，记录一下生活（主要是用着这么有"),_,s("的域名，让老婆感受一下应有的尊重，还能升华彼此的感情，哈哈哈，扯远了），还可以把自己“搞机爱好”（"),f,s("）的过程记录下，把"),e("a",B,[s("README"),n(t)]),s("中所说的"),A,s("，"),x,s("变为自己的知识，而不是只会复制粘贴，成了一个"),C,s("人。让这项爱好不至于太肤浅，还能真正掌握一下基础的编程知识。")])]),y]),S,e("ul",null,[e("li",null,[s("可以看出，Hexo与Hugo都是静态网站生成器的首选，而且都可以用上"),e("a",j,[H,n(t)]),s("。在网上筛选了使用者反馈信息之后，最终我还是选择了用Go语言编写的"),w,s("+"),G,s("+"),q,s("来搭建此Blog。")])]),D,e("ul",null,[e("li",null,[e("p",null,[e("a",P,[s("VS Code"),n(t)]),s("：巨硬出品的一款开发集成工具。功能之强大让我感觉，我之前的传统敲代码、找依赖的方式太2了。")])]),e("li",null,[e("p",null,[e("a",N,[s("Git"),n(t)]),s("：一个版本控制系统，连接 Github 的钥匙。")])]),e("li",null,[e("p",null,[e("a",F,[s("Github-pages"),n(t)]),s("：Github出品，必属精品！等等，这句话怎么这么耳熟？又想到github也被巨硬收购了...细思极恐...")])]),e("li",null,[e("p",null,[e("a",T,[s("Hugo"),n(t)]),s('：今天的主角，本地新建一个名为"Hugo"的目录、一个名为"Sites"的用于存放所有博客站点的目录，Hugo 目录下应有三个文件；同时，下载好 Git 程序。')])])]),L,e("blockquote",null,[V,e("blockquote",null,[M,e("blockquote",null,[e("p",null,[e("strong",null,[e("a",O,[s("default.md"),n(t)])]),s(" # 模板")])]),I])]),K,e("ul",null,[e("li",null,[e("p",null,[e("strong",null,[s("找到喜欢的"),e("a",W,[s("主题"),n(t)]),s("，在themes目录下 git clone 或者 git submodule add ，模块化安装能够方便升级主题(根目录上传到GitHub后，themes文件夹会链接到主题仓库界面，后面要用到的action要想跑起来一定要记得加上submodule的配置）。")])])]),R]),z,e("ul",null,[e("li",null,[s("至此，本地博客就搭建好了。在博客根目录下 git bash，使用 hugo server 来看下主题的效果！（hugo server -D 的话草稿也会显示，注意是大写 D）跳出一大堆提示后，在任意浏览器打开 "),e("a",Y,[s("http://localhost:1313"),n(t)]),s(" 就能实时查看博客效果与调整。如果的博客设置有误，页面会无法查看，请先排除错误后再进行尝试。不需要查看后 Ctrl+C 退出即可。")])]),J,e("ul",null,[e("li",null,[s("这一步为自动部署到 public 做准备，进入刚刚建好的 repository，点进它的 "),$,s(" 中，找到 "),U,s("，点击 "),Q,s("，名称为 "),X,s(" ，内容为之前备份下来的 "),n(i,{to:"/post/hello-world/#%E7%94%9F%E6%88%90-token%E7%94%A8%E4%BA%8E%E8%BF%9E%E6%8E%A5%E4%B8%A4%E4%B8%AA%E4%BB%93%E5%BA%93"},{default:l(()=>[Z]),_:1}),s("。")])]),ee,e("ul",null,[e("li",null,[e("p",null,[e("em",null,[e("strong",null,[s("格式参考"),e("a",se,[s("GitHub Pages action"),n(t)])])])])]),ne]),ae,e("ul",null,[e("li",null,[s("在Cloudflare为自定义域名添加 CNAME 记录，以及四条 A 记录，详见 github 官方说明： "),e("a",te,[s("Managing a custom domain for your GitHub Pages site"),n(t)])])]),ie,e("ol",le,[e("li",null,[s("重大更新！！！实现 "),n(i,{to:"/post/hello-world/"},{default:l(()=>[s("Hugo Blog")]),_:1}),s(" 源码github、gitee、gitlab三端同步，"),oe,s("『格式』，最好在github中添加，避免出错！")])]),re,e("ol",de,[e("li",null,[e("strong",null,[s("新增 "),e("a",ce,[s("小康博客"),n(t)]),s(" 鼠标指针、侧边栏样式。")])])]),ue,e("p",null,[e("strong",null,[s("本篇文章的"),n(i,{to:"/hello-world/#%E5%BC%80%E5%A7%8B%E5%AE%9E%E6%88%98"},{default:l(()=>[s("部署流程")]),_:1}),s("对网上教程进行了整合，再加上自己的理解而成。")])])])}const ke=p(v,[["render",pe],["__file","hello-world.html.vue"]]);export{ke as default};
