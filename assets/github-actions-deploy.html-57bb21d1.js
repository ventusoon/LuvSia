import{_ as r,a as c,b as d,c as p}from"./4-8d3c8c2c.js";import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as m,c as h,d as v,a as e,b as n,e as s,w as a,f as l}from"./app-ac610df7.js";const b={},g=e("blockquote",null,[e("p",null,[e("em",null,[e("strong",null,"Automatically deploying the Front End to the server using GitHub Actions")])])],-1),y=e("h2",{id:"introduction-to-github-actions-and-principles",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#introduction-to-github-actions-and-principles","aria-hidden":"true"},"#"),n(" Introduction to GitHub Actions and Principles")],-1),k=e("strong",null,"GitHub Actions",-1),f=e("strong",null,"GitHub Action",-1),_={href:"https://docs.github.com/en/actions",target:"_blank",rel:"noopener noreferrer"},x=e("li",null,[e("p",null,[n("The documentation reveals the powerful capabilities of "),e("strong",null,"GitHub Actions"),n(" in code management, run deployment, test pushing, and more, eliminating a lot of repetitive work. Deploying the frontend directly to the server through an ssh client requires installing various dependencies, which significantly reduces server efficiency and is not easy to correct.")])],-1),w=e("strong",null,"GitHub Action",-1),S=e("details",null,[e("summary",null," GitHub Action Successful Screenshot "),e("figure",null,[e("img",{src:r,alt:"GitHub Action Success Interface",tabindex:"0",loading:"lazy"}),e("figcaption",null,"GitHub Action Success Interface")])],-1),E=e("strong",null,"GitHub Action",-1),A=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>name: luvsia-hugo-blog-autodeploy <span class="token comment"># Workflow name, name it yourself</span>

on:
  push: <span class="token comment"># When the request is triggered</span>
    branches:
      - main  <span class="token comment"># Branch to act on, here it&#39;s main, can also be master</span>
  pull_request:

jobs: <span class="token comment"># Grouping all tasks run in the workflow file</span>
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: <span class="token variable">\${{ github.workflow }</span><span class="token punctuation">}</span>-<span class="token variable">\${{ github.ref }</span><span class="token punctuation">}</span>
    steps:
      - uses: actions/checkout@v2
        with:               <span class="token comment"># If you used git submodule add when installing the theme</span>
          submodules: <span class="token boolean">true</span>  <span class="token comment"># You don&#39;t need to comment out these three lines, this line is set to true</span>
          fetch-depth: <span class="token number">0</span>    <span class="token comment"># Fetch all history for .GitInfo and .Lastmod</span>

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: <span class="token string">&#39;latest&#39;</span>  <span class="token comment"># Get the latest version of Hugo</span>
          extended: <span class="token boolean">true</span>          <span class="token comment"># If you&#39;re not using the extended version of Hugo, change true to false</span>

      - name: Build
        run: hugo   <span class="token comment"># Use Hugo to build the static website</span>

      - name: Deploy to github
        uses: peaceiris/actions-gh-pages@v3
        if: <span class="token variable">\${{ github.ref == &#39;refs<span class="token operator">/</span>heads<span class="token operator">/</span>main&#39; }</span><span class="token punctuation">}</span>  <span class="token comment"># Make sure to fill in main or master</span>
        with:
          personal_token: <span class="token variable">\${{ secrets.PERSONAL_TOKEN }</span><span class="token punctuation">}</span> <span class="token comment"># If you used a different name for the secret, replace PERSONAL_TOKEN</span>
          external_repository: ventusoon/LuvSia <span class="token comment"># Fill in the remote public repository </span>
          publish_dir: ./public
          cname: luvsia.com        <span class="token comment"># Fill in the custom domain</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>According to the example analysis, a simple <strong>GitHub Actions</strong> flowchart is as follows</li></ul><blockquote><p>Action</p><blockquote><p>1️⃣ Action Conditions</p><blockquote><p>Time Node</p><p>Branch</p></blockquote><p>2️⃣ Work Tasks</p><blockquote><p>Operating Environment</p><p>Step One</p><p>Step Two</p><p>Step N</p><p>Directly Publish to Server/Local/Hosted Page</p></blockquote></blockquote></blockquote><h2 id="hands-on-practice" tabindex="-1"><a class="header-anchor" href="#hands-on-practice" aria-hidden="true">#</a> Hands-on Practice</h2><ul><li><p>Because it needs to be deployed to the server, you need to understand the way to connect to the server. Here we choose ssh connection, there are many tutorials online that also use sftp connection, both are fine.</p></li><li><p><strong>GitHub Actions</strong> deployment files are usually named <code>xxx.yml</code> and are located in the project&#39;s root directory <code>/ .github/workflows/xxx.yml</code>.</p></li><li><p>Edit <code>xxx.yml</code> on the <strong>GitHub</strong> page, and you can see many featured Actions on the right side in the <strong>App Marketplace</strong>. Since it is an ssh connection, choose the highly-rated <code>ssh-deploy</code> app here and use the latest version.</p></li></ul><details><summary> ssh-deploy App </summary><figure><img src="`+c+'" alt="ssh-deploy" tabindex="0" loading="lazy"><figcaption>ssh-deploy</figcaption></figure></details>',6),R={href:"https://github.com/easingthemes/ssh-deploy",target:"_blank",rel:"noopener noreferrer"},T=e("img",{src:"https://img.shields.io/badge/GitHubAction-easingthemes/ssh--deploy-cyan?logo=github",alt:"",loading:"lazy"},null,-1),H=l(`<table><thead><tr><th style="text-align:center;">Config Name</th><th style="text-align:center;">Purpose</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">SSH_PRIVATE_KEY</td><td style="text-align:center;">SSH key</td><td style="text-align:center;"><code>The key should be generated in PEM format</code></td></tr><tr><td style="text-align:center;">REMOTE_HOST</td><td style="text-align:center;">Remote host</td><td style="text-align:center;"><code>10.10.10.10</code></td></tr><tr><td style="text-align:center;">REMOTE_USER</td><td style="text-align:center;">User</td><td style="text-align:center;"><code>root</code></td></tr><tr><td style="text-align:center;">REMOTE_PORT</td><td style="text-align:center;">Port</td><td style="text-align:center;"><code>Default 22</code></td></tr><tr><td style="text-align:center;">SOURCE</td><td style="text-align:center;">Source, content to deploy</td><td style="text-align:center;"><code>/dist/</code></td></tr><tr><td style="text-align:center;">TARGET</td><td style="text-align:center;">Target, path to deploy</td><td style="text-align:center;"><code>/data/docker_data/npm/data/sub.ven2s.cn/</code></td></tr><tr><td style="text-align:center;">ARGS</td><td style="text-align:center;">Arguments passed to rsync (during sync)</td><td style="text-align:center;"><code>-avz --delete</code></td></tr><tr><td style="text-align:center;">SSH_CMD_ARGS</td><td style="text-align:center;">A set of ssh arguments, they must be prefixed with -o and separated by commas</td><td style="text-align:center;"><code>-o SomeArgument=no, -o SomeOtherArgument=5</code></td></tr><tr><td style="text-align:center;">EXCLUDE</td><td style="text-align:center;">Paths to exclude, separated by commas</td><td style="text-align:center;"><code>/dist/, /node_modules/</code></td></tr><tr><td style="text-align:center;">SCRIPT_BEFORE</td><td style="text-align:center;">Script to run on the host machine before rsync</td><td style="text-align:center;"><code>mkdir -p /data/docker_data/npm/data/sub.ven2s.cn</code></td></tr><tr><td style="text-align:center;">SCRIPT_AFTER</td><td style="text-align:center;">Script to run on the host machine after rsync</td><td style="text-align:center;"><code>reboot</code></td></tr></tbody></table><ul><li>With the above preliminary work, we can now start the operation.</li></ul><h3 id="configure-key-on-the-server" tabindex="-1"><a class="header-anchor" href="#configure-key-on-the-server" aria-hidden="true">#</a> Configure Key on the Server</h3><ul><li>In the <code>root</code> directory, enter</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>m PEM <span class="token operator">-</span>t rsa <span class="token operator">-</span>b <span class="token number">4096</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Generate key files<span class="token punctuation">,</span> press Enter twice in a row<span class="token punctuation">.</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Note<span class="token operator">:</span> You should not set a password <span class="token keyword">for</span> the private key you <span class="token function">generated</span> <span class="token punctuation">(</span>leave it empty<span class="token punctuation">)</span><span class="token punctuation">.</span> The rsync <span class="token function">ssh</span> <span class="token punctuation">(</span>used <span class="token keyword">for</span> deployment<span class="token punctuation">)</span> does not support entering the private key password as a command line argument<span class="token punctuation">.</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>At this point, private key file <code>id_dsa</code> and public key file <code>id_dsa.pub</code> are generated in the <code>/root/.ssh/</code> directory. Generate <code>authorized_keys</code> based on the public key file, and set the permissions for the three files.</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cat <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub <span class="token operator">&gt;&gt;</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>chmod <span class="token number">600</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>chmod <span class="token number">600</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>chmod <span class="token number">600</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>At this point, the server-side work is completed objectively. If you encounter various error prompts during the connection, please <strong>Google</strong> on your own. I won&#39;t go into details here.</li></ul><h3 id="set-repository-key-in-the-project" tabindex="-1"><a class="header-anchor" href="#set-repository-key-in-the-project" aria-hidden="true">#</a> Set Repository Key in the Project</h3><ul><li>Funny thing, I mistakenly filled the <strong>Repository Key</strong> into <strong>Code Space Secret</strong>, and I couldn&#39;t connect. I thought it was a problem with the server. The day before yesterday, I even hallucinated and accidentally ran <code>rm -rf /</code>......</li></ul><details><summary> Repository Secret Location in GitHub Project </summary><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><ul><li>In the <code>cat</code> key on the server, copy all contents into the <strong>SSH_PRIVATE_KEY</strong> in the image above, and fill in the server IP in <strong>REMOTE_HOST</strong>, and fill in <code>root</code> in <strong>REMOTE_USER</strong>. (Or directly fill in <strong>&quot;root&quot;</strong> in the yml file)</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cat <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>or</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>REMOTE_USER<span class="token operator">:</span> <span class="token string">&quot;root&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="publish-deployment-files-to-remote" tabindex="-1"><a class="header-anchor" href="#publish-deployment-files-to-remote" aria-hidden="true">#</a> Publish Deployment Files to Remote</h3><ul><li>I&#39;ve put the files for automatically publishing the nginx-proxy-manager static page below. Modify the configuration according to your own operating environment and dependencies.</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Name of the current workflow</span>
name: sub-web-deploy
on:
  push:
    branches:
      - master

jobs: <span class="token comment"># Tasks to build, a workflow has multiple build tasks,</span>
  build-and-deploy:
    runs-on: ubuntu-latest <span class="token comment"># What server to run these tasks on, using the latest version of ubuntu here</span>
    
    steps: <span class="token comment"># Steps of the build task, a task can be divided into multiple steps</span>
      <span class="token comment"># Switch branch</span>
      - name: Checkout
        uses: actions/checkout@v4
      <span class="token comment"># Step 2 Install node on the current server</span>
      - name: use <span class="token function">node</span>
        uses: actions/setup-node@v3.8.1
        with:
          node-version: <span class="token number">18</span>
          cache: <span class="token string">&quot;yarn&quot;</span>
      <span class="token comment"># Step 3 Download project dependencies    </span>
      - name: <span class="token function">install</span>
        run: <span class="token function">yarn</span> <span class="token function">install</span>
      <span class="token comment"># Step 4 Package the node project</span>
      - name: build
        run: <span class="token function">yarn</span> build
      <span class="token comment"># Step 5 Deploy the project to the server</span>
      - name: <span class="token function">ssh</span> deploy
        uses: easingthemes/ssh-deploy@v4.1.10
        with:
      <span class="token comment"># Private key part of an SSH key pair</span>
          SSH_PRIVATE_KEY: <span class="token variable">\${{ secrets.SSH_PRIVATE_KEY }</span><span class="token punctuation">}</span>
      <span class="token comment"># Remote host</span>
          REMOTE_HOST: <span class="token variable">\${{ secrets.REMOTE_HOST }</span><span class="token punctuation">}</span>
      <span class="token comment"># Remote user</span>
          REMOTE_USER: <span class="token variable">\${{ secrets.REMOTE_USER }</span><span class="token punctuation">}</span>
      <span class="token comment"># Source directory, path relative to \`$GITHUB_WORKSPACE\` root, eg: \`dist/\`</span>
          SOURCE: <span class="token string">&quot;/dist/&quot;</span>
      <span class="token comment"># Script to run on host machine before rsync</span>
          SCRIPT_BEFORE: <span class="token string">&quot;mkdir -p /data/docker_data/npm/data/sub.ven2s.cn&quot;</span>
      <span class="token comment"># Target directory</span>
          TARGET: <span class="token string">&quot;/data/docker_data/npm/data/sub.ven2s.cn/&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if-you-like-please-share-this-page-if-you-have-any-questions-please-leave-a-comment" tabindex="-1"><a class="header-anchor" href="#if-you-like-please-share-this-page-if-you-have-any-questions-please-leave-a-comment" aria-hidden="true">#</a> If you like, please share this page, if you have any questions, please leave a comment.</h2><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',23);function I(G,O){const t=i("RouterLink"),o=i("ExternalLinkIcon");return m(),h("div",null,[g,v(" more "),y,e("ul",null,[e("li",null,[e("p",null,[n("I've been using "),k,n(" for a while now, and the current blog is automatically deployed to GitHub hosting using "),f,n(),s(t,{to:"/hello-world/#auto-deploy-to-a-public-repository"},{default:a(()=>[n("Auto-deploy to a public repository")]),_:1}),n(". Today, I'll detail the steps to successfully deploy the frontend to the server and share some insights based on my understanding. I'll complete the writing when I have some free time (after work 😭).")])]),e("li",null,[e("p",null,[e("a",_,[n("GitHub Actions Official Documentation"),s(o)]),n(": Automate, customize, and execute software development workflows in your GitHub repository. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and integrate actions into completely customized workflows.")])]),x,e("li",null,[e("p",null,[n("This tutorial is an extension of "),s(t,{to:"/nginx-proxy-manager/"},{default:a(()=>[n("Deploying a Static Website with Nginx Proxy Manager")]),_:1}),n(", eliminating the need to install node environments and various dependencies, and directly deploying the frontend in "),w,n(". After making changes to the backend files locally, deploy the frontend to the server. It achieves a one-time setup effect.")])])]),S,e("ul",null,[e("li",null,[n("Analyzing the example, taking "),s(t,{to:"/hello-world/#auto-deploy-to-a-public-repository"},{default:a(()=>[n("Auto-deploy to a public repository")]),_:1}),n(" as an example, the "),E,n(" workflow is analyzed as follows")])]),A,e("ul",null,[e("li",null,[n("In the README of the "),e("a",R,[T,s(o)]),n(" project, you can see the main configuration names and purposes as follows.")])]),H])}const M=u(b,[["render",I],["__file","github-actions-deploy.html.vue"]]);export{M as default};
