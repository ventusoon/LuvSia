import{_ as i,a as l,b as o}from"./3-47e785b4.js";import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as d,c as p,a as e,e as s,b as n,f as t}from"./app-984984f8.js";const u={},h=e("blockquote",null,[e("p",null,[e("em",null,[e("strong",null,"3 Steps to Build Your Own ChatGPT Web")])])],-1),m={href:"https://en.wikipedia.org/wiki/ChatGPT",target:"_blank",rel:"noopener noreferrer"},v=e("em",null,"ChatGPT",-1),b=e("em",null,"Chat Generative Pre-trained Transformer",-1),g=e("li",null,[e("p",null,"ChatGPT is an AI-powered natural language processing tool. It engages in conversations by understanding and learning human language. It can interact based on the context of the conversation, simulating human-like chat interactions. It can even complete tasks such as writing emails, video scripts, copywriting, translation, coding, paper writing, and more.")],-1),k={id:"chatgpt-web",tabindex:"-1"},f=e("a",{class:"header-anchor",href:"#chatgpt-web","aria-hidden":"true"},"#",-1),_={href:"https://github.com/ventusoon/chatgpt-web",target:"_blank",rel:"noopener noreferrer"},P=e("em",null,"ChatGPT-Web",-1),y=t('<ul><li>Supports dual models and provides two unofficial <code>ChatGPT API</code> methods.</li></ul><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><table><thead><tr><th>Method</th><th>Free?</th><th>Reliability</th><th>Quality</th></tr></thead><tbody><tr><td><code>ChatGPTAPI(gpt-3.5-turbo-0301)</code></td><td>No</td><td>Reliable</td><td>Relatively simple</td></tr><tr><td><code>ChatGPTUnofficialProxyAPI(Web AccessToken)</code></td><td>Yes</td><td>Relatively unreliable</td><td>Smart</td></tr></tbody></table><ul><li>Comparison:</li></ul>',4),w={href:"https://platform.openai.com/",title:"Get API",target:"_blank",rel:"noopener noreferrer"},x=e("em",null,"ChatGPTAPI(gpt-3.5-turbo-0301)",-1),T=e("em",null,"gpt-3.5-turbo-0301",-1),C=e("em",null,"ChatGPT",-1),I=e("em",null,"OpenAI",-1),O={href:"https://chat.openai.com/api/auth/session",title:"Get AccessToken",target:"_blank",rel:"noopener noreferrer"},A=e("em",null,"ChatGPTUnofficialProxyAPI",-1),S=e("em",null,"ChatGPT",-1),E=e("em",null,"API",-1),G=e("em",null,"Cloudflare",-1),R=e("em",null,"ChatGPT",-1),N=t(`<h2 id="thanks-to-the-original-author-chanzhaoyu-for-his-hard-work" tabindex="-1"><a class="header-anchor" href="#thanks-to-the-original-author-chanzhaoyu-for-his-hard-work" aria-hidden="true">#</a> Thanks to the original author <em>Chanzhaoyu</em> for his hard work</h2><h2 id="building-steps" tabindex="-1"><a class="header-anchor" href="#building-steps" aria-hidden="true">#</a> Building Steps</h2><h3 id="step-one-install-docker-and-docker-compose" tabindex="-1"><a class="header-anchor" href="#step-one-install-docker-and-docker-compose" aria-hidden="true">#</a> Step One: Install <em>Docker</em> and <em>Docker-compose</em></h3><ul><li>Install <em>Docker</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Update and install necessary software</span>

<span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token function">nano</span>

<span class="token comment"># Install Docker</span>

<span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://get.docker.com/ <span class="token operator">|</span> <span class="token function">sh</span>

<span class="token comment"># Start Docker automatically</span>

systemctl start <span class="token function">docker</span>

systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Install <em>Docker-compose</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/download/v2.17.3/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-two-install-chatgpt-web" tabindex="-1"><a class="header-anchor" href="#step-two-install-chatgpt-web" aria-hidden="true">#</a> Step Two: Install <em>ChatGPT-Web</em></h3><ul><li>Create a directory</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/docker_data/chatgpt
<span class="token builtin class-name">cd</span> /data/docker_data/chatgpt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Create a <em>docker-compose.yml</em> file</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nano</span> docker-compose.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Enter the following content in the file, then save with <em>Ctrl+X</em> and exit with <em>Y</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;3&#39;</span>

services:
  app:
    image: luvsia/chatgpt-web <span class="token comment"># Always use latest; pull this tag image again when updating</span>
    ports:
      - <span class="token number">3002</span>:3002
    environment:
      <span class="token comment"># Choose one of the following</span>
      OPENAI_API_KEY: 
      <span class="token comment"># Choose one of the following</span>
      OPENAI_ACCESS_TOKEN: 
      <span class="token comment"># Optional API interface address; can be used when OPENAI_API_KEY is set</span>
      OPENAI_API_BASE_URL:
      <span class="token comment"># Optional API model; can be used when OPENAI_API_KEY is set</span>
      OPENAI_API_MODEL:
      <span class="token comment"># Optional reverse proxy</span>
      API_REVERSE_PROXY:
      <span class="token comment"># Optional access secret key</span>
      AUTH_SECRET_KEY:
      <span class="token comment"># Optional timeout in milliseconds</span>
      TIMEOUT_MS: <span class="token number">100000</span>
      <span class="token comment"># Optional Socks proxy, effective when used with SOCKS_PROXY_PORT</span>
      SOCKS_PROXY_HOST:
      <span class="token comment"># Optional Socks proxy port, effective when used with SOCKS_PROXY_HOST</span>
      SOCKS_PROXY_PORT:

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>After creating, run</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Now you can access <em>ChatGPT</em> through IP:3002</li></ul><h3 id="step-three-reverse-proxy-chatgpt-and-enable-typewriter-effect" tabindex="-1"><a class="header-anchor" href="#step-three-reverse-proxy-chatgpt-and-enable-typewriter-effect" aria-hidden="true">#</a> Step Three: Reverse Proxy <em>ChatGPT</em> and Enable Typewriter Effect</h3>`,18),Y={href:"http://chat.example.com",target:"_blank",rel:"noopener noreferrer"},K=t('<figure><img src="'+i+'" alt="ChatGPT" tabindex="0" loading="lazy"><figcaption>ChatGPT</figcaption></figure><ul><li>Reverse proxy</li></ul><figure><img src="'+l+`" alt="ChatGPT" tabindex="0" loading="lazy"><figcaption>ChatGPT</figcaption></figure><ul><li>Modify the reverse proxy configuration file to enable the typewriter effect</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Set reverse proxy parameters to support streaming output</span>
proxy_buffering off<span class="token punctuation">;</span>
chunked_transfer_encoding on<span class="token punctuation">;</span>
tcp_nopush on<span class="token punctuation">;</span>
tcp_nodelay on<span class="token punctuation">;</span>
keepalive_timeout <span class="token number">65</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+'" alt="ChatGPT" tabindex="0" loading="lazy"><figcaption>ChatGPT</figcaption></figure><h1 id="mission-accomplished-enjoy" tabindex="-1"><a class="header-anchor" href="#mission-accomplished-enjoy" aria-hidden="true">#</a> Mission accomplished, <em>Enjoy</em></h1>',7);function B(D,z){const a=c("ExternalLinkIcon");return d(),p("div",null,[h,e("ul",null,[e("li",null,[e("p",null,[e("a",m,[v,s(a)]),n(" (full name: "),b,n(") is a chatbot program developed by OpenAI and was released on November 30, 2022.")])]),g]),e("h1",k,[f,n(),e("a",_,[P,s(a)])]),y,e("ol",null,[e("li",null,[e("a",w,[x,s(a)]),n(" uses "),T,n(" to simulate "),C,n(" through the official "),I,n(" API (the most robust method but not free and does not use models fine-tuned for chat).")]),e("li",null,[e("a",O,[A,s(a)]),n(" accesses "),S,n("'s backend "),E,n(" through an unofficial proxy server, bypassing "),G,n(" (uses the actual "),R,n(", lightweight, but depends on a third-party server, and has rate limitations).")])]),N,e("ul",null,[e("li",null,[n("In the Baota panel, create a website "),e("a",Y,[n("chat.example.com"),s(a)]),n(", register a certificate, and enable HTTPS")])]),K])}const X=r(u,[["render",B],["__file","chatgpt.html.vue"]]);export{X as default};
