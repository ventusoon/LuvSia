const e=JSON.parse(`{"key":"v-25d20966","path":"/en/code/github-actions-deploy.html","title":"Automated Deployment of Frontend to Server using GitHub Actions","lang":"en-US","frontmatter":{"icon":"code-compare","title":"Automated Deployment of Frontend to Server using GitHub Actions","date":"2023-10-17T05:56:43.000Z","author":["Ven2s"],"tag":["Server","FrontEnd"],"category":["linux"],"star":true,"sticky":true,"description":"Automatically deploying the Front End to the server using GitHub Actions Introduction to GitHub Actions and Principles I've been using GitHub Actions for a while now, and the current blog is automatically deployed to GitHub hosting using GitHub Action Auto-deploy to a public repository. Today, I'll detail the steps to successfully deploy the frontend to the server and share some insights based on my understanding. I'll complete the writing when I have some free time (after work ðŸ˜­). GitHub Actions Official Documentation: Automate, customize, and execute software development workflows in your GitHub repository. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and integrate actions into completely customized workflows. The documentation reveals the powerful capabilities of GitHub Actions in code management, run deployment, test pushing, and more, eliminating a lot of repetitive work. Deploying the frontend directly to the server through an ssh client requires installing various dependencies, which significantly reduces server efficiency and is not easy to correct. This tutorial is an extension of Deploying a Static Website with Nginx Proxy Manager, eliminating the need to install node environments and various dependencies, and directly deploying the frontend in GitHub Action. After making changes to the backend files locally, deploy the frontend to the server. It achieves a one-time setup effect.","head":[["link",{"rel":"alternate","hreflang":"zh-tw","href":"https://luvsia.com/code/github-actions-deploy.html"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://luvsia.com/zh/code/github-actions-deploy.html"}],["meta",{"property":"og:url","content":"https://luvsia.com/en/code/github-actions-deploy.html"}],["meta",{"property":"og:site_name","content":"SpringVen2s"}],["meta",{"property":"og:title","content":"Automated Deployment of Frontend to Server using GitHub Actions"}],["meta",{"property":"og:description","content":"Automatically deploying the Front End to the server using GitHub Actions Introduction to GitHub Actions and Principles I've been using GitHub Actions for a while now, and the current blog is automatically deployed to GitHub hosting using GitHub Action Auto-deploy to a public repository. Today, I'll detail the steps to successfully deploy the frontend to the server and share some insights based on my understanding. I'll complete the writing when I have some free time (after work ðŸ˜­). GitHub Actions Official Documentation: Automate, customize, and execute software development workflows in your GitHub repository. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and integrate actions into completely customized workflows. The documentation reveals the powerful capabilities of GitHub Actions in code management, run deployment, test pushing, and more, eliminating a lot of repetitive work. Deploying the frontend directly to the server through an ssh client requires installing various dependencies, which significantly reduces server efficiency and is not easy to correct. This tutorial is an extension of Deploying a Static Website with Nginx Proxy Manager, eliminating the need to install node environments and various dependencies, and directly deploying the frontend in GitHub Action. After making changes to the backend files locally, deploy the frontend to the server. It achieves a one-time setup effect."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-TW"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-11T11:59:20.000Z"}],["meta",{"property":"article:author","content":"Ven2s"}],["meta",{"property":"article:tag","content":"Server"}],["meta",{"property":"article:tag","content":"FrontEnd"}],["meta",{"property":"article:published_time","content":"2023-10-17T05:56:43.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-11T11:59:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Automated Deployment of Frontend to Server using GitHub Actions\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-17T05:56:43.000Z\\",\\"dateModified\\":\\"2023-11-11T11:59:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ven2s\\"}]}"]]},"headers":[{"level":2,"title":"Introduction to GitHub Actions and Principles","slug":"introduction-to-github-actions-and-principles","link":"#introduction-to-github-actions-and-principles","children":[]},{"level":2,"title":"Hands-on Practice","slug":"hands-on-practice","link":"#hands-on-practice","children":[{"level":3,"title":"Configure Key on the Server","slug":"configure-key-on-the-server","link":"#configure-key-on-the-server","children":[]},{"level":3,"title":"Set Repository Key in the Project","slug":"set-repository-key-in-the-project","link":"#set-repository-key-in-the-project","children":[]},{"level":3,"title":"Publish Deployment Files to Remote","slug":"publish-deployment-files-to-remote","link":"#publish-deployment-files-to-remote","children":[]}]},{"level":2,"title":"If you like, please share this page, if you have any questions, please leave a comment.","slug":"if-you-like-please-share-this-page-if-you-have-any-questions-please-leave-a-comment","link":"#if-you-like-please-share-this-page-if-you-have-any-questions-please-leave-a-comment","children":[]}],"git":{"createdTime":1698956907000,"updatedTime":1699703960000,"contributors":[{"name":"ventusoon","email":"sia@ik.me","commits":3}]},"readingTime":{"minutes":4.19,"words":1258},"filePathRelative":"en/code/github-actions-deploy.md","localizedDate":"October 17, 2023","excerpt":"<blockquote>\\n<p><em><strong>Automatically deploying the Front End to the server using GitHub Actions</strong></em></p>\\n</blockquote>\\n<h2> Introduction to GitHub Actions and Principles</h2>\\n<ul>\\n<li>\\n<p>I've been using <strong>GitHub Actions</strong> for a while now, and the current blog is automatically deployed to GitHub hosting using <strong>GitHub Action</strong> <a href=\\"/hello-world/#auto-deploy-to-a-public-repository\\" target=\\"blank\\">Auto-deploy to a public repository</a>. Today, I'll detail the steps to successfully deploy the frontend to the server and share some insights based on my understanding. I'll complete the writing when I have some free time (after work ðŸ˜­).</p>\\n</li>\\n<li>\\n<p><a href=\\"https://docs.github.com/en/actions\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GitHub Actions Official Documentation</a>: Automate, customize, and execute software development workflows in your GitHub repository. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and integrate actions into completely customized workflows.</p>\\n</li>\\n<li>\\n<p>The documentation reveals the powerful capabilities of <strong>GitHub Actions</strong> in code management, run deployment, test pushing, and more, eliminating a lot of repetitive work. Deploying the frontend directly to the server through an ssh client requires installing various dependencies, which significantly reduces server efficiency and is not easy to correct.</p>\\n</li>\\n<li>\\n<p>This tutorial is an extension of <a href=\\"/nginx-proxy-manager/\\" target=\\"blank\\">Deploying a Static Website with Nginx Proxy Manager</a>, eliminating the need to install node environments and various dependencies, and directly deploying the frontend in <strong>GitHub Action</strong>. After making changes to the backend files locally, deploy the frontend to the server. It achieves a one-time setup effect.</p>\\n</li>\\n</ul>","autoDesc":true}`);export{e as data};
