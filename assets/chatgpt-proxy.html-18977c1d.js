import{_ as i}from"./1-5a2eb01e.js";import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c,a as e,b as s,d as n,f as d,e as t}from"./app-03de3457.js";const p={},u=e("blockquote",null,[e("p",null,[e("em",null,[e("strong",null,"Build ChatGPT Reverse Proxy")])])],-1),m=e("em",null,"ChatGPT-Web",-1),h={href:"https://github.com/linweiyuan/go-chatgpt-api",target:"_blank",rel:"noopener noreferrer"},v=e("img",{src:"https://img.shields.io/badge/github-go--chatgpt--api-pink",alt:"go-chatgpt-api",loading:"lazy"},null,-1),b=t(`<h2 id="build-steps" tabindex="-1"><a class="header-anchor" href="#build-steps" aria-hidden="true">#</a> Build Steps</h2><h3 id="_1-install-docker-and-docker-compose" tabindex="-1"><a class="header-anchor" href="#_1-install-docker-and-docker-compose" aria-hidden="true">#</a> 1. Install <em>Docker</em> and <em>Docker-compose</em></h3><ul><li>Install <em>Docker</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Update and install essential software</span>

<span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token function">nano</span>

<span class="token comment"># Install Docker</span>

<span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://get.docker.com/ <span class="token operator">|</span> <span class="token function">sh</span>

<span class="token comment"># Start Docker on boot</span>

systemctl start <span class="token function">docker</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Install <em>Docker-compose</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),g={id:"_2-install-go-chatgpt-api",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#_2-install-go-chatgpt-api","aria-hidden":"true"},"#",-1),_={href:"https://github.com/linweiyuan/go-chatgpt-api",target:"_blank",rel:"noopener noreferrer"},f=e("em",null,"go-chatgpt-api",-1),x=t(`<ul><li>Create a directory</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/docker_data/go-chatgpt-api
<span class="token builtin class-name">cd</span> /data/docker_data/go-chatgpt-api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Create a <em>docker-compose.yml</em> file</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nano</span> docker-compose.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Enter the following content in the file, then save with <em>Ctrl+X</em> and exit with <em>Y</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>version: <span class="token string">&quot;3&quot;</span>
services:
  go-chatgpt-api:
    container_name: go-chatgpt-api
    image: linweiyuan/go-chatgpt-api
    ports:
      - <span class="token number">8080</span>:8080  <span class="token comment"># Container port mapped to host port 8080; adjust host port as needed</span>
    environment:
      - <span class="token assign-left variable">GIN_MODE</span><span class="token operator">=</span>release
      - <span class="token assign-left variable">CHATGPT_PROXY_SERVER</span><span class="token operator">=</span>http://chatgpt-proxy-server:9515
      <span class="token comment">#- NETWORK_PROXY_SERVER=http://host:port     # NETWORK_PROXY_SERVER: Shadowsocks proxy address, e.g., http://10.0.5.10:7890</span>
      <span class="token comment">#- NETWORK_PROXY_SERVER=socks5://host:port   # NETWORK_PROXY_SERVER: Shadowsocks proxy address</span>
    depends_on:
      - chatgpt-proxy-server
    restart: unless-stopped

  chatgpt-proxy-server:
    container_name: chatgpt-proxy-server
    image: linweiyuan/chatgpt-proxy-server
    restart: unless-stopped
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>After creating, run</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Check running containers; ensure the container status is UP</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Check if the mapped listening port on the host is active</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ss -tnlp<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-use-self-built-reverse-proxy" tabindex="-1"><a class="header-anchor" href="#_3-use-self-built-reverse-proxy" aria-hidden="true">#</a> 3. Use Self-built Reverse Proxy</h3>`,13),y=e("em",null,"access token",-1),R={href:"http://ip:8080/conversation",target:"_blank",rel:"noopener noreferrer"},E=e("em",null,"ip",-1),P=e("em",null,"nginx",-1),w=e("em",null,"ip",-1),C={href:"https://example.com/conversation",target:"_blank",rel:"noopener noreferrer"},S=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Reverse proxy, optional</span>
API_REVERSE_PROXY: https://example.com/conversation
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Now, access chatgpt-web to see if it works properly. Make sure <em>chatgpt-proxy-server</em> is running correctly, and <em>go-chatgpt-api</em> needs some time to initialize.</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Check container logs for normal operation</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> chatgpt-proxy-server
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> go-chatgpt-api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="completed" tabindex="-1"><a class="header-anchor" href="#completed" aria-hidden="true">#</a> Completed</h2><figure><img src="`+i+'" alt="1" tabindex="0" loading="lazy"><figcaption>üòè</figcaption></figure>',5),T={id:"tutorial-source",tabindex:"-1"},N=e("a",{class:"header-anchor",href:"#tutorial-source","aria-hidden":"true"},"#",-1),O={href:"https://github.com/dqzboy/ChatGPT-Porxy",target:"_blank",rel:"noopener noreferrer"},V=e("img",{src:"https://img.shields.io/badge/github-dqzboy/ChatGPT--Porxy-lemonchiffon",alt:"ChatGPT-Porxy",loading:"lazy"},null,-1);function I(D,q){const a=o("ExternalLinkIcon");return r(),c("div",null,[u,e("ul",null,[e("li",null,[s("Due to the free proxy of the "),m,s(" project being down, we choose this project "),e("a",h,[v,n(a)]),s(" to address the proxy issue.")])]),d(" more "),b,e("h3",g,[k,s(" 2. Install "),e("a",_,[f,n(a)])]),x,e("ul",null,[e("li",null,[s("Use the "),y,s(" mode and access with our self-built proxy address; the access address for the self-built IP is "),e("em",null,[e("a",R,[s("http://ip:8080/conversation"),n(a)])]),s("; if you don't want to expose the "),E,s(", you can use "),P,s(" to reverse proxy "),w,s(" + port, "),e("em",null,[e("a",C,[s("https://example.com/conversation"),n(a)])]),s(".")])]),S,e("h2",T,[N,s(" Tutorial Source: "),e("a",O,[V,n(a)])])])}const z=l(p,[["render",I],["__file","chatgpt-proxy.html.vue"]]);export{z as default};
