const t=JSON.parse('{"key":"v-d7b7dc3e","path":"/code/github-actions-deploy.html","title":"使用GitHub Actions自動部署前端到伺服器","lang":"zh-TW","frontmatter":{"icon":"simple-icons:githubactions","title":"使用GitHub Actions自動部署前端到伺服器","date":"2023-10-17T05:56:43.000Z","author":["Ven2s"],"tag":["伺服器","前端"],"category":["Code"],"star":true,"sticky":true,"description":"使用GitHub Actions自動部署前端到伺服器 GitHub Actions介紹及原理 接觸GitHub Actions也有一段時間了，目前此博客正是使用GitHub Action 自動部署到GitHub托管的。今天我將詳細記錄將前端頁面成功部署到伺服器的操作方法，順便分享一些我自己的理解。在有空的時候再進一步完善（下班時間開始😭）。 GitHub Actions官方文檔：GitHub Actions允許您在GitHub存儲庫中自動化、自定義和執行軟件開發工作流。您可以發現、創建並共享操作以執行您喜歡的任何作業（包括CI/CD），並將操作合併到完全自定義的工作流中。 通過文檔可以看出GitHub Action具有強大的代碼管理、運行部署、測試推送等一體化自動發布部署功能，省去了大量的重複性工作。由於通過ssh客戶端連接到伺服器，直接進行前端部署，需要安裝各種依賴，很大程度上降低了伺服器運行效率，且不易對代碼進行修正。 本教程是在《用Nginx Proxy Manager部署靜態網頁》基礎上延伸出的思路，省去了安裝node環境和各種依賴的步驟，直接在GitHub Action中部署前端。每次在本地對後端文件進行修正後，直接將前端發布到伺服器。起到一勞永逸的效果。","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://luvsia.com/zh/code/github-actions-deploy.html"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://luvsia.com/en/code/github-actions-deploy.html"}],["meta",{"property":"og:url","content":"https://luvsia.com/code/github-actions-deploy.html"}],["meta",{"property":"og:site_name","content":"風至萬始蘇"}],["meta",{"property":"og:title","content":"使用GitHub Actions自動部署前端到伺服器"}],["meta",{"property":"og:description","content":"使用GitHub Actions自動部署前端到伺服器 GitHub Actions介紹及原理 接觸GitHub Actions也有一段時間了，目前此博客正是使用GitHub Action 自動部署到GitHub托管的。今天我將詳細記錄將前端頁面成功部署到伺服器的操作方法，順便分享一些我自己的理解。在有空的時候再進一步完善（下班時間開始😭）。 GitHub Actions官方文檔：GitHub Actions允許您在GitHub存儲庫中自動化、自定義和執行軟件開發工作流。您可以發現、創建並共享操作以執行您喜歡的任何作業（包括CI/CD），並將操作合併到完全自定義的工作流中。 通過文檔可以看出GitHub Action具有強大的代碼管理、運行部署、測試推送等一體化自動發布部署功能，省去了大量的重複性工作。由於通過ssh客戶端連接到伺服器，直接進行前端部署，需要安裝各種依賴，很大程度上降低了伺服器運行效率，且不易對代碼進行修正。 本教程是在《用Nginx Proxy Manager部署靜態網頁》基礎上延伸出的思路，省去了安裝node環境和各種依賴的步驟，直接在GitHub Action中部署前端。每次在本地對後端文件進行修正後，直接將前端發布到伺服器。起到一勞永逸的效果。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-TW"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-11T18:29:50.000Z"}],["meta",{"property":"article:author","content":"Ven2s"}],["meta",{"property":"article:tag","content":"伺服器"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:published_time","content":"2023-10-17T05:56:43.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-11T18:29:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用GitHub Actions自動部署前端到伺服器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-17T05:56:43.000Z\\",\\"dateModified\\":\\"2023-11-11T18:29:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ven2s\\"}]}"]]},"headers":[{"level":2,"title":"GitHub Actions介紹及原理","slug":"github-actions介紹及原理","link":"#github-actions介紹及原理","children":[]},{"level":2,"title":"實戰演練","slug":"實戰演練","link":"#實戰演練","children":[{"level":3,"title":"在伺服器端配置密鑰","slug":"在伺服器端配置密鑰","link":"#在伺服器端配置密鑰","children":[]},{"level":3,"title":"項目中設置倉庫密鑰","slug":"項目中設置倉庫密鑰","link":"#項目中設置倉庫密鑰","children":[]},{"level":3,"title":"發布部署文件到遠端","slug":"發布部署文件到遠端","link":"#發布部署文件到遠端","children":[]}]},{"level":2,"title":"如果喜歡請分享此頁面，如有疑問請留言。","slug":"如果喜歡請分享此頁面-如有疑問請留言。","link":"#如果喜歡請分享此頁面-如有疑問請留言。","children":[]}],"git":{"createdTime":1698620985000,"updatedTime":1699727390000,"contributors":[{"name":"ventusoon","email":"sia@ik.me","commits":5}]},"readingTime":{"minutes":5.71,"words":1714},"filePathRelative":"code/github-actions-deploy.md","localizedDate":"2023年10月17日","excerpt":"<blockquote>\\n<p><em><strong>使用GitHub Actions自動部署前端到伺服器</strong></em></p>\\n</blockquote>\\n<h2> GitHub Actions介紹及原理</h2>\\n<ul>\\n<li>\\n<p>接觸GitHub Actions也有一段時間了，目前此博客正是使用GitHub Action <a href=\\"/hello-world/#%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2%E5%88%B0%E5%85%AC%E9%96%8B%E5%80%89%E5%BA%AB\\" target=\\"blank\\">自動部署到GitHub托管</a>的。今天我將詳細記錄將前端頁面成功部署到伺服器的操作方法，順便分享一些我自己的理解。在有空的時候再進一步完善（下班時間開始😭）。</p>\\n</li>\\n<li>\\n<p><a href=\\"https://docs.github.com/zh/actions\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GitHub Actions官方文檔</a>：GitHub Actions允許您在GitHub存儲庫中自動化、自定義和執行軟件開發工作流。您可以發現、創建並共享操作以執行您喜歡的任何作業（包括CI/CD），並將操作合併到完全自定義的工作流中。</p>\\n</li>\\n<li>\\n<p>通過文檔可以看出GitHub Action具有強大的代碼管理、運行部署、測試推送等一體化自動發布部署功能，省去了大量的重複性工作。由於通過ssh客戶端連接到伺服器，直接進行前端部署，需要安裝各種依賴，很大程度上降低了伺服器運行效率，且不易對代碼進行修正。</p>\\n</li>\\n<li>\\n<p>本教程是在<a href=\\"/nginx-proxy-manager/\\" target=\\"blank\\">《用Nginx Proxy Manager部署靜態網頁》</a>基礎上延伸出的思路，省去了安裝node環境和各種依賴的步驟，直接在GitHub Action中部署前端。每次在本地對後端文件進行修正後，直接將前端發布到伺服器。起到一勞永逸的效果。</p>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
