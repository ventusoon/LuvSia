import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o,c as s,a,b as e,d as t,f as c,e as i}from"./app-a84cf966.js";const l={},u={id:"front-end-construction-of-sub-web-modify",tabindex:"-1"},h=a("a",{class:"header-anchor",href:"#front-end-construction-of-sub-web-modify","aria-hidden":"true"},"#",-1),p={href:"https://github.com/youshandefeiyang/sub-web-modify",target:"_blank",rel:"noopener noreferrer"},b={href:"https://sub.luvsia.com",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/CareyWang/sub-web",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/youshandefeiyang/sub-web-api",target:"_blank",rel:"noopener noreferrer"},v=i(`<h3 id="update-the-system-and-install-node-and-yarn" tabindex="-1"><a class="header-anchor" href="#update-the-system-and-install-node-and-yarn" aria-hidden="true">#</a> Update the system and install Node and Yarn</h3><p>Run the following four lines of code in order. If you are using CentOS, please replace <strong><code>apt</code></strong> with <strong><code>yum</code></strong> in the first two commands.</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>apt update -y
apt install -y curl wget sudo nodejs git
apt install npm
npm install -g yarn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After the commands are executed, run the following code to check if Node and Yarn are installed successfully. If successful, it will return the version numbers.</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>node -v
yarn --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="download-and-install-sub-web-modify" tabindex="-1"><a class="header-anchor" href="#download-and-install-sub-web-modify" aria-hidden="true">#</a> Download and install sub-web-modify</h3><p>Clone the <strong><code>sub-web-modify</code></strong> program and navigate into the <strong><code>sub-web-modify</code></strong> folder.</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>git clone https://github.com/youshandefeiyang/sub-web-modify.git
cd sub-web-modify
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Install the build dependencies in the project directory. The build process may take a bit of time.</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>yarn install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Run the Web client using webpack for local development.</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>yarn serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If the following image appears, the front-end debugging mode has started successfully.</p><figure><img src="https://raw.githubusercontent.com/ventusoon/LuvSia/gh-pages/images/buildSUB/yarn-success.png" alt="yarn-success" tabindex="0" loading="lazy"><figcaption>yarn-success</figcaption></figure>`,14),g={id:"now-if-we-access-http-server-ip-8080-in-our-browser-we-should-be-able-to-preview-the-front-end-of-sub-web-modify",tabindex:"-1"},y=a("a",{class:"header-anchor",href:"#now-if-we-access-http-server-ip-8080-in-our-browser-we-should-be-able-to-preview-the-front-end-of-sub-web-modify","aria-hidden":"true"},"#",-1),w={href:"http://server-ip:8080/",target:"_blank",rel:"noopener noreferrer"},k=i(`<h4 id="remember-to-open-the-firewall-and-security-group-for-port-8082" tabindex="-1"><a class="header-anchor" href="#remember-to-open-the-firewall-and-security-group-for-port-8082" aria-hidden="true">#</a> <em>Remember to open the firewall and security group for port 8082.</em></h4><h3 id="modify-the-default-backend-address-and-add-remote-rules" tabindex="-1"><a class="header-anchor" href="#modify-the-default-backend-address-and-add-remote-rules" aria-hidden="true">#</a> Modify the default backend address and add remote rules</h3><p>Find the file <code>/root/sub-web-modify/src/views/Subconverter.vue</code> in your VPS and open it with an editor.</p><p>Find <code>backendOptions:</code> and enter your parsed backend address. The domain is the backend domain you prepared earlier, change <code>http</code> to <code>https</code>, and add <code>/sub?</code> as a suffix. (This will make your backend address appear in the options below).</p><p>If you don&#39;t want to use the backend author&#39;s default conversion, you can change <code>const defaultBackend =</code> to your own domain, don&#39;t forget to add <code>&quot;&quot;</code>.</p><p>Find <code>remoteConfig: [</code>, press Enter, and copy your favorite rules.</p><h3 id="after-configuring-package-the-website" tabindex="-1"><a class="header-anchor" href="#after-configuring-package-the-website" aria-hidden="true">#</a> After configuring, package the website</h3><p>After configuring, the program will update automatically. Refresh the front-end webpage, and the rules you just added will appear.</p><p>After modifying the default backend address and the original configuration rules, you are done.</p><p>Now, our front-end debugging is complete. We now need to package and deploy it.</p><p>First, stop the debugging program with CTRL+C. Exit the current debugging, and then run the following command to package:</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>yarn build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Execute the following packaging command. A <code>dist</code> directory will be generated under <code>/root/sub-web-modify</code>, and this directory is the publishing directory of the website.</p><p>Copy all the files inside this directory to the root directory of your front-end site.</p><h3 id="one-click-setup-for-the-front-end" tabindex="-1"><a class="header-anchor" href="#one-click-setup-for-the-front-end" aria-hidden="true">#</a> One-click setup for the front end</h3><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>cd /root &amp;&amp; git clone https://github.com/youshandefeiyang/sub-web-modify.git &amp;&amp; chmod -R 755 sub-web-modify &amp;&amp; cd sub-web-modify &amp;&amp; yarn install &amp;&amp; yarn build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="publish-the-front-end" tabindex="-1"><a class="header-anchor" href="#publish-the-front-end" aria-hidden="true">#</a> Publish the front end</h3><p>If you haven&#39;t installed Baota, go to the official Baota website to see the installation tutorial.</p><p>In the Baota panel, click to add a site, and add the front-end site separately, and configure the SSL certificate.</p><p>Copy all the files in the <code>/root/sub-web/dist</code> folder to the root directory of the front-end site.</p><p>Visit the website, and the front end is now deployed.</p>`,21),S={id:"subconverter-backend-construction",tabindex:"-1"},x=a("a",{class:"header-anchor",href:"#subconverter-backend-construction","aria-hidden":"true"},"#",-1),_={href:"https://github.com/tindy2013/subconverter",target:"_blank",rel:"noopener noreferrer"},J=i(`<h3 id="create-a-backend-site-and-reverse-proxy" tabindex="-1"><a class="header-anchor" href="#create-a-backend-site-and-reverse-proxy" aria-hidden="true">#</a> Create a backend site and reverse proxy</h3><p>In the Baota panel, create a backend site, configure SSL, and set up the site to reverse proxy to port 25500.</p><p>Click on the name of the newly created backend site in the Baota panel, and in the pop-up message box, click on reverse proxy to add a proxy.</p><p>The reverse proxy configuration method is as follows:</p><figure><img src="https://raw.githubusercontent.com/ventusoon/LuvSia/gh-pages/images/buildSUB/buildSUB.png" alt="Reverse Proxy" tabindex="0" loading="lazy"><figcaption>Reverse Proxy</figcaption></figure><p>After setting up, let&#39;s start installing the backend.</p><h3 id="build-the-backend-program" tabindex="-1"><a class="header-anchor" href="#build-the-backend-program" aria-hidden="true">#</a> Build the backend program</h3><h4 id="here-we-can-build-the-backend-program-in-two-ways-the-first-is-to-build-it-with-binary-files-and-the-second-is-to-use-docker-i-personally-recommend-docker-for-its-simple-configuration-with-just-one-command" tabindex="-1"><a class="header-anchor" href="#here-we-can-build-the-backend-program-in-two-ways-the-first-is-to-build-it-with-binary-files-and-the-second-is-to-use-docker-i-personally-recommend-docker-for-its-simple-configuration-with-just-one-command" aria-hidden="true">#</a> Here we can build the backend program in two ways: the first is to build it with binary files, and the second is to use Docker. I personally recommend Docker for its simple configuration with just one command.</h4><h3 id="method-one-build-with-binary-files" tabindex="-1"><a class="header-anchor" href="#method-one-build-with-binary-files" aria-hidden="true">#</a> Method One: Build with binary files</h3><h4 id="download-and-unzip-the-subconverter-binary-file" tabindex="-1"><a class="header-anchor" href="#download-and-unzip-the-subconverter-binary-file" aria-hidden="true">#</a> Download and unzip the subconverter binary file</h4><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>cd /root
wget https://github.com/tindy2013/subconverter/releases/download/v0.7.2/subconverter_linux64.tar.gz
tar -zxvf subconverter_linux64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="after-completion-a-folder-called-subconverter-will-appear-in-the-root-folder-and-this-is-our-backend-program" tabindex="-1"><a class="header-anchor" href="#after-completion-a-folder-called-subconverter-will-appear-in-the-root-folder-and-this-is-our-backend-program" aria-hidden="true">#</a> <em>After completion, a folder called <code>subconverter</code> will appear in the /root folder, and this is our backend program.</em></h4><h4 id="modify-the-configuration-file-parameters" tabindex="-1"><a class="header-anchor" href="#modify-the-configuration-file-parameters" aria-hidden="true">#</a> Modify the configuration file parameters</h4><p>Now we need to modify some parameters in the backend configuration file.</p><p>Find the file <code>/root/subconverter/pref.ini</code> on your VPS and find the following parameters to modify:</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>api_access_token=123123dfsdsdfsdfsdf            # Set it randomly, as long as you know it
managed_config_prefix=https://sub.yourdomin.com  # Set it to the backend domain we just parsed, changing http to https and adding /sub? as a suffix (this will make the backend address appear)
listen=127.0.0.1                                # Change this to 127.0.0.1 for reverse proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="create-a-service-process-and-start-it" tabindex="-1"><a class="header-anchor" href="#create-a-service-process-and-start-it" aria-hidden="true">#</a> Create a service process and start it</h4><p>Next, we need to create a service to run the backend program automatically every time the VPS is restarted or booted.</p><p>Find the directory <code>/etc/systemd/system</code> on your VPS and create a file named <code>sub.service</code>.</p><p>Open the file and paste the following content, then save.</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>[Unit]
Description=A API For Subscription Convert
After=network.target
 
[Service]
Type=simple
ExecStart=/root/subconverter/subconverter
WorkingDirectory=/root/subconverter
Restart=always
RestartSec=10
 
[Install]
WantedBy=multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="check-the-running-status-and-set-up-auto-start-on-boot" tabindex="-1"><a class="header-anchor" href="#check-the-running-status-and-set-up-auto-start-on-boot" aria-hidden="true">#</a> Check the running status and set up auto-start on boot</h4><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>systemctl daemon-reload
systemctl start sub
systemctl enable sub
systemctl status sub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="at-this-point-the-backend-is-also-set-up-you-can-now-access-our-backend-in-the-browser-by-visiting-the-backend-domain-backend-setup-successful" tabindex="-1"><a class="header-anchor" href="#at-this-point-the-backend-is-also-set-up-you-can-now-access-our-backend-in-the-browser-by-visiting-the-backend-domain-backend-setup-successful" aria-hidden="true">#</a> <em>At this point, the backend is also set up. You can now access our backend in the browser by visiting the backend domain. Backend setup successful!</em></h4><h3 id="method-two-docker-container-setup" tabindex="-1"><a class="header-anchor" href="#method-two-docker-container-setup" aria-hidden="true">#</a> Method Two: Docker Container Setup</h3><p>If your server has Docker installed, you can use the following command:</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>docker run -d --restart=always -p 25500:25500 tindy2013/subconverter:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then, use the following command to confirm the status:</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>curl http://localhost:25500/version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If it outputs the current subconverter container version, the setup is successful.</p>`,30);function C(B,I){const n=d("ExternalLinkIcon");return o(),s("div",null,[a("h2",u,[h,e(),a("a",p,[e("Front-end Construction of Sub-Web-Modify"),t(n)])]),a("p",null,[a("a",b,[e("This project"),t(n)]),e(" is based on "),a("a",m,[e("CareyWang/sub-web"),t(n)]),e(', with remade CSS styles, solving most layout details, adding "Dark Mode" with automatic switch between light/dark modes (manually switchable by clicking the "sun/moon" icon), adding "Advanced Functions" toggle, adding short link selection/customization functionality, incorporating nearly a hundred remote configurations, introducing '),a("a",f,[e("sub-web aggregate API"),t(n)]),e(", and adding features like uploading custom remote configurations/JS advanced sorting nodes/JS advanced filtering nodes!")]),c(" more "),v,a("h4",g,[y,e(" Now, if we access "),a("a",w,[e("http://server-ip:8080/"),t(n)]),e(" in our browser, we should be able to preview the front-end of sub-web-modify.")]),k,a("h2",S,[x,e(),a("a",_,[e("SubConverter Backend Construction"),t(n)])]),J])}const R=r(l,[["render",C],["__file","build-sub.html.vue"]]);export{R as default};
